<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	
	<!-- 扫描带有spring特殊机制的类,这是把这些包下面所有的类都添加到spring中进行管理 -->
	<context:component-scan base-package="com.cutter_point" />
	
	<!-- 属性遍历器 -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
	<!-- 连接数据库属性配置 ，destroy-method="close"就是说在这个bean被摧毁的情况下可以调用这个bean默认的close方法-->
	<bean id="myDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@localhost:1522:orcl"/>
        <property name="username" value="xf1205020116"/>
        <property name="password" value="xf1205020116"/>
        <!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="1"/>
		<!-- 连接池的最大值  dbcp2里面似乎没有-->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2"/>
		<!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1"/>
	</bean>

	<!-- hibernate二级缓存的配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	<!-- configuration elided for brevity -->
		<property name="dataSource" ref="myDataSource" />
		<!-- <property name="mappingResources">
			<list>	映射文件
				<value>com/cutter_point/bean/product/ProductType.hbm.xml</value>
			</list>
		</property> -->
		<property name="hibernateProperties">	<!-- 用来配置hibernate的属性配置 -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
			</props>
			<!-- <value>
				hibernate.hbm2ddl.auto=update  其他取值 create、create-drop、update、validate none
				开启二级缓存功能
				hibernate.cache.use_second_level_cache = true
				hibernate.cache.use_query_cache = false
				hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.EhCacheRegionFactory
		        hibernate3的二级缓存配置  
		        <property name="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</property>  
			</value> -->
		</property>
		<property name="packagesToScan" value="com.cutter_point.bean" />
	</bean>
	
	<!-- 事务管理器，吧上面配置的bean注入到这个里面 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 我们采用注解的方式来使用这个事务，首先我们开启事务 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- Action交给spring托管 -->
	<!-- <bean id="productTypeAction" class="com.cutter_point.web.action.product.ProductTypeAction" scope="prototype"/> -->

</beans>